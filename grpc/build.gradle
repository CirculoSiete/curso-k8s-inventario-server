buildscript {
  dependencies {
    classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.5.7.RELEASE'
    classpath 'com.bmuschko:gradle-docker-plugin:3.2.0'
  }
}

apply plugin: 'org.springframework.boot'
apply plugin: com.bmuschko.gradle.docker.DockerRemoteApiPlugin
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.github.ben-manes.versions'

import com.bmuschko.gradle.docker.tasks.image.*

jar {
  baseName = 'service'
  version = ''
}

task createDockerfile(type: com.bmuschko.gradle.docker.tasks.image.Dockerfile) {
  destFile = project.file('build/libs/Dockerfile')
  from 'openjdk:8u141-jre'
  maintainer 'Miguel Angel Medina Mondragon "miguel@circulosiete.com"'
  copyFile 'service.jar', '/opt/service.jar'
  exposePort 6565, 8081
  entryPoint 'java', "-Djava.awt.headless=true", "-Xms128m", "-Xmx128m", '-jar', '/opt/service.jar'
}

task buildImage(type: com.bmuschko.gradle.docker.tasks.image.DockerBuildImage) {
  dependsOn createDockerfile
  inputDir = createDockerfile.destFile.parentFile
  tag = 'circulo7/cursos-k8s-inventario-server:' + project.version.toLowerCase()
}

task pushImage(type: com.bmuschko.gradle.docker.tasks.image.DockerPushImage) {
  dependsOn buildImage
  imageName = buildImage.tag
}

createDockerfile.dependsOn bootRepackage

dependencyManagement {
  imports {
    mavenBom 'io.spring.platform:platform-bom:Brussels-SR5'
  }
  dependencies {
    dependencySet(group: 'io.grpc', version: grpcVersion) {
      entry 'grpc-all'
      entry 'grpc-netty'
      entry 'grpc-protobuf'
      entry 'grpc-stub'
    }
    dependency "com.google.protobuf:protobuf-java:$protobufVersion"
  }
}

dependencies {
  compile project(':contract')
  compile project(':service')

  compile('org.lognet:grpc-spring-boot-starter:2.1.0')

  runtime 'org.postgresql:postgresql:42.1.4'
}

/*
idea {
  module {
    sourceDirs += file('./src/main/proto')
    sourceDirs += file("${protoGenDir}")
  }
  project {
    ipr {
      withXml { provider ->
        // Get XML as groovy.util.Node to work with.
        def projectXml = provider.asNode()

        // Find compiler configuration component.
        def compilerConfiguration = projectXml.component.find { component ->
          component.'@name' == 'CompilerConfiguration'
        }

        // Replace current annotationProcessing
        // that is part of the compiler configuration.
        def currentAnnotationProcessing = compilerConfiguration.annotationProcessing
        currentAnnotationProcessing.replaceNode {
          annotationProcessing {
            profile(name: 'Default', default: true, enabled: true) {
              processorPath(useClasspath: true)
            }
          }
        }
      }
    }
  }
}*/
