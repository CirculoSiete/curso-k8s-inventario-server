buildscript {
  ext {
    jadiraVersion = '5.0.0.GA'
  }
  repositories {
    jcenter()
  }
  dependencies {
    classpath 'io.spring.gradle:dependency-management-plugin:1.0.3.RELEASE'
    classpath 'com.github.ben-manes:gradle-versions-plugin:0.15.0'
  }
}

repositories {
  jcenter()
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'groovy'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.github.ben-manes.versions'

version = '0.0.1-SNAPSHOT'

ext {
  grpcVersion = '1.7.0'
  protobufVersion = '3.4.0'
  protoGenDir = file('generated-src/')
}

dependencyManagement {
  imports {
    mavenBom 'io.spring.platform:platform-bom:Brussels-SR5'
  }
  dependencies {
    dependencySet(group: 'io.grpc', version: grpcVersion) {
      entry 'grpc-all'
      entry 'grpc-netty'
      entry 'grpc-protobuf'
      entry 'grpc-stub'
    }
    dependency "com.google.protobuf:protobuf-java:$protobufVersion"
  }
}

dependencies {

  compile project(':contract') //TODO: remover este dependencia
  compile 'org.springframework.boot:spring-boot-starter-amqp'
  compile 'org.springframework.boot:spring-boot-starter-data-jpa'

  compile "joda-time:joda-time"
  compile "org.jadira.usertype:usertype.extended:${jadiraVersion}"
  compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"
  compile 'org.javamoney:moneta:1.1'

  compileOnly 'org.projectlombok:lombok'

  testCompile 'org.codehaus.groovy:groovy-all:2.4.12'
  testCompile 'org.springframework.boot:spring-boot-starter-test'
  testCompile 'org.spockframework:spock-core:1.1-groovy-2.4'
  testCompile 'org.spockframework:spock-spring:1.1-groovy-2.4'
  testCompile 'com.h2database:h2:1.4.196'
}

/*
idea {
  module {
    sourceDirs += file('./src/main/proto')
    sourceDirs += file("${protoGenDir}")
  }
  project {
    ipr {
      withXml { provider ->
        // Get XML as groovy.util.Node to work with.
        def projectXml = provider.asNode()

        // Find compiler configuration component.
        def compilerConfiguration = projectXml.component.find { component ->
          component.'@name' == 'CompilerConfiguration'
        }

        // Replace current annotationProcessing
        // that is part of the compiler configuration.
        def currentAnnotationProcessing = compilerConfiguration.annotationProcessing
        currentAnnotationProcessing.replaceNode {
          annotationProcessing {
            profile(name: 'Default', default: true, enabled: true) {
              processorPath(useClasspath: true)
            }
          }
        }
      }
    }
  }
}*/
