buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.3'
    classpath 'io.spring.gradle:dependency-management-plugin:1.0.3.RELEASE'
    classpath 'com.github.ben-manes:gradle-versions-plugin:0.15.0'
  }
}

repositories {
  jcenter()
}

description = 'Independent example for end-to-end copy and use'

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'groovy'
apply plugin: 'com.google.protobuf'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.github.ben-manes.versions'

version = '0.0.1-SNAPSHOT'

ext {
  grpcVersion = '1.7.0'
  protobufVersion = '3.4.0'
  protoGenDir = file('generated-src/')
}

dependencyManagement {
  dependencies {
    dependencySet(group: 'io.grpc', version: grpcVersion) {
      entry 'grpc-all'
      entry 'grpc-netty'
      entry 'grpc-protobuf'
      entry 'grpc-stub'
    }
    dependency "com.google.protobuf:protobuf-java:$protobufVersion"
  }
}

dependencies {
  compile 'io.grpc:grpc-stub'
  compile 'io.grpc:grpc-protobuf'
  compile 'io.grpc:grpc-netty'

  //compileOnly 'org.projectlombok:lombok'

  testCompile 'org.codehaus.groovy:groovy-all:2.4.12'
  testCompile 'org.spockframework:spock-core:1.1-groovy-2.4'
}

sourceSets {
  main {
    proto {
      srcDir 'src/main/proto'
    }
    java {
      srcDir "$protoGenDir/main/java"
    }
  }
}

protobuf {
  protoc {
    artifact = "com.google.protobuf:protoc:$protobufVersion"
  }

  plugins {
    grpc {
      artifact = "io.grpc:protoc-gen-grpc-java:$grpcVersion"
    }
  }

  generateProtoTasks {
    ofSourceSet('main').each { task ->
      task.builtins {
        java {
          outputSubDir = 'java'
        }
      }
      task.plugins {
        grpc {
          outputSubDir = 'java'
        }
      }
    }
  }
  generatedFilesBaseDir = protoGenDir
}

task cleanProtoGen {
  doFirst {
    delete "${protoGenDir}"
  }
}
clean.dependsOn cleanProtoGen


/*
idea {
  module {
    sourceDirs += file('./src/main/proto')
    sourceDirs += file("${protoGenDir}")
  }
  project {
    ipr {
      withXml { provider ->
        // Get XML as groovy.util.Node to work with.
        def projectXml = provider.asNode()

        // Find compiler configuration component.
        def compilerConfiguration = projectXml.component.find { component ->
          component.'@name' == 'CompilerConfiguration'
        }

        // Replace current annotationProcessing
        // that is part of the compiler configuration.
        def currentAnnotationProcessing = compilerConfiguration.annotationProcessing
        currentAnnotationProcessing.replaceNode {
          annotationProcessing {
            profile(name: 'Default', default: true, enabled: true) {
              processorPath(useClasspath: true)
            }
          }
        }
      }
    }
  }
}*/
