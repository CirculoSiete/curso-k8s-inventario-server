buildscript {
  ext {
    jadiraVersion = '5.0.0.GA'
  }
  repositories {
    jcenter()
  }
  dependencies {
    classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.3'
    classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.5.7.RELEASE'
    classpath 'com.bmuschko:gradle-docker-plugin:3.2.0'
    classpath 'io.spring.gradle:dependency-management-plugin:1.0.3.RELEASE'
    classpath 'com.github.ben-manes:gradle-versions-plugin:0.15.0'
  }
}

repositories {
  jcenter()
}

description = 'Independent example for end-to-end copy and use'

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'groovy'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.springframework.boot'
apply plugin: 'com.google.protobuf'
apply plugin: com.bmuschko.gradle.docker.DockerRemoteApiPlugin
apply plugin: 'com.github.ben-manes.versions'

import com.bmuschko.gradle.docker.tasks.image.*

jar {
  baseName = 'service'
  version = ''
}

version = '0.0.1-SNAPSHOT'

task createDockerfile(type: com.bmuschko.gradle.docker.tasks.image.Dockerfile) {
  destFile = project.file('build/libs/Dockerfile')
  from 'openjdk:8u141-jre'
  maintainer 'Miguel Angel Medina Mondragon "miguel@circulosiete.com"'
  copyFile 'service.jar', '/opt/service.jar'
  exposePort 6565, 8081
  entryPoint 'java', "-Djava.awt.headless=true", "-Xms128m", "-Xmx128m", '-jar', '/opt/service.jar'
}

task buildImage(type: com.bmuschko.gradle.docker.tasks.image.DockerBuildImage) {
  dependsOn createDockerfile
  inputDir = createDockerfile.destFile.parentFile
  tag = 'circulo7/cursos-k8s-inventario-server:' + project.version.toLowerCase()
}

task pushImage(type: com.bmuschko.gradle.docker.tasks.image.DockerPushImage) {
  dependsOn buildImage
  imageName = buildImage.tag
}

createDockerfile.dependsOn bootRepackage

ext {
  grpcVersion = '1.6.1'
  protobufVersion = '3.4.0'
  protoGenDir = file('generated-src/')
}

dependencyManagement {
  imports {
    mavenBom 'io.spring.platform:platform-bom:Brussels-SR5'
  }
  dependencies {
    dependencySet(group: 'io.grpc', version: grpcVersion) {
      entry 'grpc-all'
      entry 'grpc-netty'
      entry 'grpc-protobuf'
      entry 'grpc-stub'
    }
    dependency "com.google.protobuf:protobuf-java:$protobufVersion"
  }
}

dependencies {
  compile 'io.grpc:grpc-stub'
  compile 'io.grpc:grpc-protobuf'
  compile 'io.grpc:grpc-netty'
  compile 'org.springframework.boot:spring-boot-starter-actuator'
  compile 'org.springframework.boot:spring-boot-starter-amqp'
  compile('org.lognet:grpc-spring-boot-starter:2.1.0')
  compile 'com.google.code.gson:gson:2.8.2'

  compile 'org.postgresql:postgresql:42.1.4'
  compile 'org.springframework.boot:spring-boot-starter-data-jpa'


  compile "joda-time:joda-time"
  compile "org.jadira.usertype:usertype.extended:${jadiraVersion}"
  compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"
  compile 'org.javamoney:moneta:1.1'

  compileOnly 'org.projectlombok:lombok'

  testCompile 'org.codehaus.groovy:groovy-all:2.4.12'
  testCompile 'org.springframework.boot:spring-boot-starter-test'
  testCompile 'org.spockframework:spock-core:1.1-groovy-2.4'
  testCompile 'org.spockframework:spock-spring:1.1-groovy-2.4'
  testCompile 'com.h2database:h2:1.4.196'
}

sourceSets {
  main {
    proto {
      srcDir 'src/main/proto'
    }
    java {
      srcDir "$protoGenDir/main/java"
    }
  }
}

protobuf {
  protoc {
    artifact = "com.google.protobuf:protoc:$protobufVersion"
  }

  plugins {
    grpc {
      artifact = "io.grpc:protoc-gen-grpc-java:$grpcVersion"
    }
  }

  generateProtoTasks {
    ofSourceSet('main').each { task ->
      task.builtins {
        java {
          outputSubDir = 'java'
        }
      }
      task.plugins {
        grpc {
          outputSubDir = 'java'
        }
      }
    }
  }
  generatedFilesBaseDir = protoGenDir
}

task cleanProtoGen {
  doFirst {
    delete "${protoGenDir}"
  }
}
clean.dependsOn cleanProtoGen

springBoot {
  executable = true
}


idea {
  module {
    sourceDirs += file('./src/main/proto')
    sourceDirs += file("${protoGenDir}")
  }
  project {
    ipr {
      withXml { provider ->
        // Get XML as groovy.util.Node to work with.
        def projectXml = provider.asNode()

        // Find compiler configuration component.
        def compilerConfiguration = projectXml.component.find { component ->
          component.'@name' == 'CompilerConfiguration'
        }

        // Replace current annotationProcessing
        // that is part of the compiler configuration.
        def currentAnnotationProcessing = compilerConfiguration.annotationProcessing
        currentAnnotationProcessing.replaceNode {
          annotationProcessing {
            profile(name: 'Default', default: true, enabled: true) {
              processorPath(useClasspath: true)
            }
          }
        }
      }
    }
  }
}
